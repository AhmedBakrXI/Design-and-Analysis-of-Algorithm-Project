problem statement:
    There are n coins placed in a row. The goal is to form n/2 pairs of them by a sequence of moves. On the first move a 
    single coin has to jump over one coin adjacent to it, on the second move a single coin has to jump over two adjacent 
    coins, on the third move a single coin has to jump over three adjacent coins, and so on, until after n/2 moves n/2 coin 
    pairs are formed. (On each move, a coin can jump right or left but it has to land on a single coin. Jumping over a coin 
    pair counts as jumping over two coins. Any empty space between adjacent coins is ignored.) Determine all the values 
    of n for which the problem has a solution and design an algorithm that solves it in the minimum number of moves for 
    those nâ€™s.
    Design greedy algorithm to find the minimum number of moves.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

assumptions: 
    represent coins with an array of ones of size n, if its space is empty then 0, if in contains a pair then two.
        0 means no coin at a position i 
        1 means 1 coin at a position i
        2 means 2 coins at a position i

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

constrains: 
    number of coins n is an even number divisible by 4 to be able to make n/2 coin pairs 
    1st move jump only 1 place 
    2nd move jump 2 places 
    3rd move jump 3 places
    ........................
    n/2 move jump n/2 places
    Any empty space between adjacent coins is ignored
    jumping over a coin pair is considered jumping over 2 coins

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
pseudocode:

function check_possible(n)
  # Check if number of coins (n) is even (divisible by 4)
  if n % 4 == 0
    return true  # Even number divisible by 4 then possible
  else
    return false  
  end if
end function



function check_done(coins, size)
  # Count the number of zeros and twos
  count_zero = 0
  count_two = 0
  for i = 0 to size - 1
    if coins[i] == 0
      count_zero++
    else if coins[i] == 2
      count_two++
  end for
  # Check if half the array is filled with each (considering rounding)
  return (count_zero == size / 2 && count_two == size / 2)
end function

function jump(coins, coin1_position, coin2_position)
  # Update coin values after a jump (set first coin to 0, second to 2)
  coins[coin1_position] = 0
  coins[coin2_position] = 2
end function



function move_possible(coins, pos1, pos2, moveNum)
  # Check if both coins are single (1) and sum of intermediate coins equals required move number
  if coins[pos1] != 1 or coins[pos2] != 1
    return false  # Not single coins
  end if
  sum = 0
  for i = pos1 + 1 to pos2 - 1
    sum += coins[i]  # Add intermediate coin values
  end for
  return sum == moveNum  # Check if sum matches required move
end function



function minimum_moves(coins, size)
  # Check if initial configuration is possible (even number of coins)
  if not check_possible(size)
    return -1  # Not possible for numbers not divisible by 4
  end if
  moves = 0  # Initialize move counter
  count = size - 1  # Start from the last coin
  # Phase 1: pair n/4 -1 coins from right to left in a greedy way, once we find a possible coin pair we jump to the next 
  for k = 0 to ((size / 4) - 1)
    while coins[count] != 1
      count--  # Find the rightmost unpaired coin
    end while
    for j = count - 1 down to 1
      if move_possible(coins, j, count, moves)
        jump(coins, j, count)  # Perform jump
        moves++
        count--
        print "Array contents:", coins
        break  # Move completed, jump to next single coin
      end if
    end for
  # Phase 2: pair the rest coins from left to right in a greedy way, once we find a possible coin pair we jump to the next 
  for k = 0 to 3 * size / 4 - 1
    if coins[k] != 1
      continue  # Skip if coin is already 2 or 0
    end if
    for j = k + 1 to size - 1
      if move_possible(coins, k, j, moves)
        jump(coins, k, j)  # Perform jump
        moves++
        print "Array contents:", coins
        break  # Move completed, jump to next single coin
      end if
    end for
  end for
  return moves  # Return the minimum number of moves
end function

function main()
    input n
    for i = 0 to n i 1
        coins[i] = 1
    result = minimum_moves(coins, n)
    if result == -1 or !check_done(coins, n):
        output "Error"
    else:
        output "Minimum number of moves: " + result + coins array content
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

complexity analysis: 

check_possible(int n): O(1)
check_done(int coins[], int size): O(n)
jump(int coins[], int coin1_position, int coin2_position): O(1).
move_possible(coins, pos1, pos2, moveNum): O(n) when the coin and its pair are at far opposite ends of array, omega(1) when the coin and its pair are very close 
minimum_moves(int coins[], int size): O(n^2) , omega(n)


time complexity of algorithm O(n^2)

